(in-package #:cl-user)
(defpackage #:cl-catmull-rom-spline/test
  (:use #:common-lisp #:cr-spline #:fiveam #:arrow-macros))
(in-package #:cl-catmull-rom-spline/test)
;(setf *run-test-when-defined* 'T)

(def-suite spline-test)
(in-suite spline-test)

(def-test sanity ()
  (let ((spline (->
                  (make-instance 'spline :dt 0.1)
                  (add-knot '(5 5))
                  (add-knot #(50 50))
                  (add-knot '(10 70)))))
    (loop for i from 1 to 25 do
          (multiple-value-bind (pt end seg-end) (next-point spline)
            (cond
              ((= i 1) (is-false end)
                       (is-false seg-end)
                       (is (equalp #(5.0 5.0) pt)))
              ((= i 11) (is-false end)
                        (is-true seg-end)
                        (is (and (= 50 (round (aref pt 0)))
                                 (= 50 (round (aref pt 1))))))
              ((= i 21) (is-false end)
                        (is-true seg-end)
                        (is (and (= 10 (round (aref pt 0)))
                                 (= 70 (round (aref pt 1))))))
              ((>= i 22) (is-false seg-end)
                         (is-true end)
                         (is (equalp #(0.0 0.0) pt)))
              (t (is-false end)
                 (is-false seg-end)))))
    (reset spline)
    (multiple-value-bind (pt end seg-end) (next-point spline)
      (is-false end)
      (is-false seg-end)
      (is (equalp #(5.0 5.0) pt)))))

(def-test can-handle-multiple-points ()
  (let ((spline (make-instance 'spline)))
    (loop for i from 0 to 20 do
          (add-knot spline (vector i 0)))
    (is (equalp #(0.0 0.0) (next-point spline)))))

(def-test scaling ()
  (let ((spline (->
                  (make-instance 'spline)
                  (add-knot '(1 2))
                  (add-knot '(2 4))
                  (add-knot '(3 6)))))
    (scale spline 2)
    (is (equalp #(#(2 4) #(2 4) #(4 8) #(6 12) #(6 12))
                (cr-spline::knots spline)))
    (scale spline 0.5)
    (is (equalp #(#(1.0 2.0) #(1.0 2.0) #(2.0 4.0) #(3.0 6.0) #(3.0 6.0))
                (cr-spline::knots spline)))))

(def-test sufficient-knots ()
  (let ((spline (make-instance 'spline)))
    (signals error (cr-spline::compute-endpoints spline))
    (add-knot spline '(1 1))
    (signals error (cr-spline::compute-endpoints spline))
    (add-knot spline '(1 2))
    (signals error (cr-spline::compute-endpoints spline))
    (add-knot spline '(1 3))
    (finishes (cr-spline::compute-endpoints spline))))

